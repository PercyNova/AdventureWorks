 Northwind Traders SQL Queries

This repository contains a collection of SQL queries designed to analyze various aspects of the Northwind Traders database. The queries span a wide range of tasks, from calculating total revenue to ranking employees and suppliers. Below is an overview of each query.

 SQL Queries

 1. Total Orders and Revenue by Customer
This query calculates the total quantity of products ordered and the total revenue generated from each customer's purchases.

SELECT c.CustomerName, sum(od.Quantity) as TotalQuantity, sum(od.QuantityPrice) as TotalRevenue
FROM Customers c
JOIN Orders o ON o.CustomerID = c.CustomerID
JOIN OrderDetails od ON od.OrderID = o.OrderID
JOIN Products p ON p.ProductID = od.ProductID
GROUP BY c.CustomerName


 2. Ranking Employees by Revenue
This query ranks employees based on the total revenue generated from the orders they managed.

SELECT o.EmployeeID, e.FirstName, e.LastName, sum(od.QuantityPrice) as TotalRevenue, 
RANK() OVER (ORDER BY sum(od.QuantityPrice) DESC) as Emprank
FROM [dbo].[Orders] o
JOIN Employees e ON e.EmployeeID = o.EmployeeID
JOIN OrderDetails od ON od.OrderID = o.OrderID
JOIN Products p ON p.ProductID = od.ProductID
GROUP BY o.EmployeeID, e.FirstName, e.LastName


 3. Orders Exceeding $5,000
This query retrieves all orders where the total revenue exceeds $5,000.

SELECT c.CustomerName, sum(od.Quantity) as TotalQuantity, sum(od.QuantityPrice) as TotalRevenue
FROM Customers c
JOIN Orders o ON o.CustomerID = c.CustomerID
JOIN OrderDetails od ON od.OrderID = o.OrderID
JOIN Products p ON p.ProductID = od.ProductID
GROUP BY c.CustomerName
HAVING sum(od.QuantityPrice) > 5000


 4. Average Revenue per Shipment for Each Shipper
This query calculates the average revenue per shipment for each shipper.

SELECT s.ShipperName, avg(od.Quantityp.Price) as AverageRevPerShipment
FROM Shippers s
JOIN Orders o ON o.ShipperID = s.ShipperID
JOIN OrderDetails od ON od.OrderID = o.OrderID
JOIN Products p ON p.ProductID = od.ProductID
GROUP BY s.ShipperName


 5. Total Revenue by Country
This query calculates the total revenue generated by customers from each country.

SELECT c.Country, sum(od.QuantityPrice) as TotalRevenue
FROM Customers c
JOIN Orders o ON o.CustomerID = c.CustomerID
JOIN OrderDetails od ON od.OrderID = o.OrderID
JOIN Products p ON p.ProductID = od.ProductID
GROUP BY c.Country


 6. Customers with More Than 10 Orders
This query identifies customers who have placed more than 10 orders.

SELECT c.CustomerName, count(o.OrderID) as TotalOrders
FROM Customers c
JOIN Orders o ON o.CustomerID = c.CustomerID
JOIN OrderDetails od ON od.OrderID = o.OrderID
JOIN Products p ON p.ProductID = od.ProductID
GROUP BY c.CustomerName
HAVING count(o.OrderID) > 10


 7. Average Price and Total Quantity Sold by Category
This query calculates the average price and total quantity sold for each product category.

SELECT c.CategoryName, avg(p.Price) as AvgPrice, sum(Quantity) as TotalQuantitySold
FROM Categories c
JOIN Products p ON p.CategoryID = c.CategoryID
JOIN OrderDetails od ON od.ProductID = p.ProductID
GROUP BY c.CategoryName


 8. Customers Who Haven’t Ordered in the Last 6 Months
This query retrieves customers who haven’t placed any orders in the last 6 months.

SELECT c.CustomerName, o.OrderDate
FROM Customers c
JOIN Orders o ON o.CustomerID = c.CustomerID
JOIN OrderDetails od ON od.OrderID = o.OrderID
WHERE o.OrderDate < DATEADD(Month, -6, '1997-02-01')


 9. Category Count by Supplier
This query calculates how many distinct categories each supplier provides products for.

SELECT DISTINCT s.SupplierName, count(c.CategoryID) as CategoryCount
FROM Products p
JOIN Suppliers s ON s.SupplierID = p.SupplierID
JOIN Categories c ON c.CategoryID = p.CategoryID
GROUP BY s.SupplierName


 10. Best-Selling Product by Country
This query identifies the best-selling product (by quantity) in each country.

SELECT 
    Country,
    ProductName,
    TotalQuantity
FROM (
    SELECT 
        c.Country,
        p.ProductName,
        SUM(od.Quantity) AS TotalQuantity,
        RANK() OVER (PARTITION BY c.Country ORDER BY SUM(od.Quantity) DESC) AS RankInCountry
    FROM 
        Customers c
    JOIN 
        Orders o ON o.CustomerID = c.CustomerID
    JOIN 
        OrderDetails od ON od.OrderID = o.OrderID
    JOIN 
        Products p ON p.ProductID = od.ProductID
    GROUP BY 
        c.Country, p.ProductName
) AS RankedData
WHERE RankInCountry = 1;


 11. Profit Calculation for Each Order
This query calculates the profit for each order, assuming a cost price of 70%.

SELECT o.OrderID, (od.Quantityp.Price) as Revenue, ((od.Quantityp.Price)0.7) as TotalCost, ((od.Quantityp.Price)0.3) as ProfitMargin
FROM OrderDetails od
JOIN Orders o ON o.OrderID = od.OrderID
JOIN Products p ON p.ProductID = od.ProductID


 12. Total Revenue by Customer
This query calculates the total revenue generated by each customer since their first order.

SELECT CustomerName, SUM(Revenue) as TotalRevenue
FROM (
    SELECT c.CustomerName, (od.Quantity  p.Price) AS Revenue
    FROM Customers c
    JOIN Orders o ON o.CustomerID = c.CustomerID
    JOIN OrderDetails od ON od.OrderID = o.OrderID
    JOIN Products p ON p.ProductID = od.ProductID
) AS RankedData
GROUP BY CustomerName
ORDER BY TotalRevenue DESC;


 13. Revenue by Employee and Product Category
This query calculates the total revenue generated by each employee for each product category.

SELECT e.FirstName, c.CategoryName, (od.Quantityp.Price) as Revenue  
FROM Orders o
JOIN Employees e ON e.EmployeeID = o.EmployeeID
JOIN OrderDetails od ON od.OrderID = o.OrderID
JOIN Products p ON p.ProductID = od.ProductID
JOIN Categories c ON c.CategoryID = p.CategoryID


 14. Classify Orders by Size
This query classifies orders into Small, Medium, and Large categories based on the total number of items ordered.

SELECT OrderID, Quantity, 
CASE
	WHEN Quantity < 5 then 'Small'
	WHEN Quantity Between 5 and 10 then 'Medium'
	ELSE 'Large'
END as OrderSize
FROM OrderDetails


 15. Suppliers with Most Revenue
This query identifies the suppliers whose products generated the most revenue.

SELECT s.SupplierName, p.ProductName, sum(p.Priceod.Quantity) as Revenue,
RANK() OVER (PARTITION BY s.SupplierName ORDER BY sum(p.Priceod.Quantity) DESC) as RankInProduct
FROM Suppliers s
JOIN Orders o ON o.ShipperID = s.SupplierID
JOIN OrderDetails od ON od.OrderID = o.OrderID
JOIN Products p ON p.ProductID = od.ProductID
GROUP BY s.SupplierName, p.ProductName


---

 How to Use

1. Clone this repository to your local machine.
2. Open the SQL queries in your preferred SQL tool (e.g., SQL Server Management Studio, DBeaver, etc.).
3. Execute the queries against the Northwind Traders database to analyze different aspects such as revenue, orders, and customer behavior.

---

 License

This repository is licensed under the MIT License. See the LICENSE file for more details.
